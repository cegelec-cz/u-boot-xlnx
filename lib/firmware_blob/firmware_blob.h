#ifndef FIRMWARE_BLOB_FIRMWARE_BLOB_H
#define FIRMWARE_BLOB_FIRMWARE_BLOB_H

#include <linux/types.h>

typedef enum {
  SW_TYPE_RECOVERY,
  SW_TYPE_RELEASE,
  SW_TYPE_TESTING,
  SW_TYPE_DEVELOPMENT,
  SW_TYPE_COUNT,
} sw_type_t;

struct blob_header
{
  uint32_t magic;
  uint32_t blob_size;
  uint32_t package_identifier_len;
  uint32_t bitstream_len;
  uint32_t elf_len;
  uint32_t project_id;
  uint32_t sw_type;
} __attribute__((__packed__));

typedef enum {
  VALIDATE_BLOB_ERR_NONE,
  VALIDATE_BLOB_ERR_INTEGRITY_VERIFICATION_FAILED,
  VALIDATE_BLOB_ERR_INTEGRITY_UNALIGNED_BLOB,
  VALIDATE_BLOB_ERR_INTEGRITY_INVALID_MAGIC,
  VALIDATE_BLOB_ERR_INTEGRITY_INVALID_BLOB_LEN,
  VALIDATE_BLOB_ERR_INTEGRITY_TOO_MANY_SIG_BYTES,
  VALIDATE_BLOB_ERR_INTEGRITY_MALFORMED_SIG,
  VALIDATE_BLOB_ERR_INVALID_SW_TYPE,
  VALIDATE_BLOB_ERR_PROJECT_ID_MISMATCH,
  VALIDATE_BLOB_ERR_UNAUTHORIZED_SW_TYPE,
  VALIDATE_BLOB_ERR_BOARD_PARTITION_MISMATCH,
  VALIDATE_BLOB_ERR_SIGNATURE_MISSING_WHEN_REQUIRED,
  VALIDATE_BLOB_ERR_INTERNAL,
  VALIDATE_BLOB_ERR_COUNT,
} validate_blob_err_t;

#endif // FIRMWARE_BLOB_FIRMWARE_BLOB_H
